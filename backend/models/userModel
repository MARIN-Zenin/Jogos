// model/alunoModel.js
const createConnection = require("../db");
const { Request, TYPES } = require("tedious");

exports.getAllUsers = (callback) => {
  const connection = createConnection();
  connection.on("connect", (err) => {
    if (err) {
      return callback(err, null);
    }
    const query = `SELECT * FROM Users1`;
    const request = new Request(query, (err, rowCount) => {
      if (err) {
        return callback(err, null);
      }
      if (rowCount === 0) {
        return callback(null, []);
      }
    });

    const result = [];
    request.on("row", (columns) => {
      result.push({
        ID: columns[0].value,
        NOME: columns[1].value,
        AGE: columns[2].value,
        EMAIL: columns[3].value,
        CONTACT: columns[4].value,
      });
    });

    request.on("requestCompleted", () => {
      connection.close(); // Fechar a conexão após a consulta ser completada
      callback(null, result);
    });

    connection.execSql(request);
  });

  connection.connect();
};

exports.createUser = (data, callback) => {
  const connection = createConnection();
  connection.on("connect", (err) => {
    if (err) {
      return callback(err, null);
    }
    const query = `INSERT INTO Users1 (ID, NOME, AGE, EMAIL, CONTACT) VALUES (@ID, @NOME, @AGE, @EMAIL, @CONTACT)`;
    const request = new Request(query, (err) => {
      if (err) {
        callback(err);
      } else {
        callback(null, { message: "Aluno inserido com sucesso!" });
      }
    });

    request.addParameter("ID", TYPES.Int, data.ID);
    request.addParameter("NOME", TYPES.VarChar, data.NOME);
    request.addParameter("AGE", TYPES.Int, data.AGE);
    request.addParameter("EMAIL", TYPES.VarChar, data.EMAIL);
    request.addParameter("CONTACT", TYPES.VarChar, data.CONTACT);

    connection.execSql(request);
  });

  connection.connect();
};

exports.updateUser = (ID, data, callback) => {
  const connection = createConnection();
  connection.on("connect", (err) => {
    if (err) {
      return callback(err, null);
    }
    const query = `UPDATE Users1 SET NOME = @NOME, AGE = @AGE, EMAIL = @EMAIL, CONTACT = @CONTACT WHERE ID = @ID`;
    const request = new Request(query, (err) => {
      if (err) {
        callback(err);
      } else {
        callback(null, { message: "User atualizado com sucesso!" });
      }
    });

    request.addParameter("ID", TYPES.Int, data.ID);
    request.addParameter("NOME", TYPES.VarChar, data.NOME);
    request.addParameter("AGE", TYPES.Int, data.AGE);
    request.addParameter("EMAIL", TYPES.VarChar, data.EMAIL);
    request.addParameter("CONTACT", TYPES.VarChar, data.CONTACT);

    connection.execSql(request);
  });

  connection.connect();
};

exports.deleteUser = (ID, callback) => {
  const connection = createConnection();
  connection.on("connect", (err) => {
    if (err) {
      return callback(err, null);
    }
    const query = `DELETE FROM Users1 WHERE ID = @ID`;
    const request = new Request(query, (err) => {
      if (err) {
        callback(err);
      } else {
        callback(null, { message: "User deletado com sucesso!" });
      }
    });

    request.addParameter("ID", TYPES.Int, ID);

    connection.execSql(request);
  });

  connection.connect();
};



// //COM BY

// exports.getAlunosByRM = (rm,callback) => {
//   const connection = createConnection(); // Cria a conexão com o banco de dados
//   connection.on("connect", (err) => {
//     if (err) {
//       return callback(err, null); // Trata erros de conexão
//     }
//     const query = `SELECT * FROM Alunos WHERE rm = ${rm}`; // SQL para buscar todos os alunos
//     const request = new Request(query, (err, rowCount) => {
//       if (err) {
//         return callback(err, null); // Trata erros de execução da consulta
//       }

//       if (rowCount === 0) {
//         return callback(null, []); // Retorna um array vazio se não houver registros
//       }
//     });

//     // Evento 'row' para capturar todas as linhas de resultados
//     const result = [];
//     request.on("row", (columns) => {
//       result.push({
//         rm: columns[0].value,
//         nome: columns[1].value,
//         idade: columns[2].value,
//         turma: columns[3].value
//       });
//     });

//     // Ao completar a consulta, retorna o array com todos os alunos
//     request.on("requestCompleted", () => {
//       callback(null, result); // Retorna o array de resultados
//     });

//     request.addParameter("rm", TYPES.Int, rm);
//     connection.execSql(request); // Executa a consulta
//   });

//   connection.connect(); // Inicia a conexão
// };

// exports.getAlunosByNOME = (nome,callback) => {
//   const connection = createConnection(); // Cria a conexão com o banco de dados
 
 
//   connection.on("connect", (err) => {
//     if (err) {
//       return callback(err, null); // Trata erros de conexão
//     }
//     const query = `SELECT * FROM alunos WHERE nome LIKE @nome`; // SQL para buscar todos os alunos
//     const request = new Request(query, (err, rowCount) => {
//       if (err) {
//         return callback(err, null); // Trata erros de execução da consulta
//       }

//       if (rowCount === 0) {
//         return callback(null, []); // Retorna um array vazio se não houver registros
//       }
//     });

//     // Evento 'row' para capturar todas as linhas de resultados
//     const result = [];
//     request.on("row", (columns) => {
//       result.push({
//         rm: columns[0].value,
//         nome: columns[1].value,
//         idade: columns[2].value,
//         turma: columns[3].value
//       });
//     });

//     // Ao completar a consulta, retorna o array com todos os alunos
//     request.on("requestCompleted", () => {
//       callback(null, result); // Retorna o array de resultados
//     });

//     request.addParameter("nome", TYPES.VarChar, `%${nome}%`);
//     connection.execSql(request); // Executa a consulta
//   });

//   connection.connect(); // Inicia a conexão
// };