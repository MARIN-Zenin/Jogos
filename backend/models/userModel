// model/alunoModel.js
const createConnection = require("../db"); // Importa a função para criar a conexão com o banco de dados
const { Request, TYPES } = require("tedious"); // Importa as classes necessárias do tedious

// Função para buscar todos os alunos no banco de dados
exports.getAllUsers = (callback) => {
  const connection = createConnection(); // Cria a conexão com o banco de dados
  connection.on("connect", (err) => {
    if (err) {
      return callback(err, null); // Trata erros de conexão
    }
    const query = `SELECT * FROM Alunos`; // SQL para buscar todos os alunos
    const request = new Request(query, (err, rowCount) => {
      if (err) {
        return callback(err, null); // Trata erros de execução da consulta
      }

      if (rowCount === 0) {
        return callback(null, []); // Retorna um array vazio se não houver registros
      }
    });

    // Evento 'row' para capturar todas as linhas de resultados
    const result = [];
    request.on("row", (columns) => {
      result.push({
        ID: columns[0].value,
        NOME: columns[1].value,
        AGE: columns[2].value,
        EMAIL: columns[3].value,
        CONTACT: columns[4].value
      });
    });

    // Ao completar a consulta, retorna o array com todos os alunos
    request.on("requestCompleted", () => {
      callback(null, result); // Retorna o array de resultados
    });

    connection.execSql(request); // Executa a consulta
  });

  connection.connect(); // Inicia a conexão
};



// // Função para criar um novo aluno
// exports.createUser = (data, callback) => {
//   const connection = createConnection(); // Cria a conexão com o banco de dados
//   connection.on("connect", (err) => {
//     if (err) {
//       return callback(err, null); // Trata erros de conexão
//     }
//     // Consulta SQL para inserir um novo aluno
//     const query = `INSERT INTO Alunos (rm, nome, idade, turma) VALUES (@rm, @nome, @idade, @turma)`;
//     const request = new Request(query, (err) => {
//       if (err) {
//         callback(err); // Chama a função callback com erro se houver falha
//       } else {
//         callback(null, { message: "Aluno inserido com sucesso!" });
//       }
//     });
//     // Adiciona os parâmetros necessários para a inserção
//     request.addParameter("rm", TYPES.Int, data.rm);
//     request.addParameter("nome", TYPES.VarChar, data.nome);
//     request.addParameter("idade", TYPES.Int, data.idade);
//     request.addParameter("turma", TYPES.VarChar, data.turma);

//     connection.execSql(request); // Executa a consulta
//   });

//   connection.connect(); // Inicia a conexão
// };

// // Função para atualizar um aluno existente
// exports.updateUser = (rm, data, callback) => {
//   const connection = createConnection(); // Cria a conexão com o banco de dados
//   connection.on("connect", (err) => {
//     if (err) {
//       return callback(err, null); // Trata erros de conexão
//     }
//     // Consulta SQL para atualizar os dados de um aluno pelo RM
//     const query = `UPDATE Alunos SET nome = @nome, idade = @idade, turma = @turma WHERE rm = @rm`;
//     const request = new Request(query, (err) => {
//       if (err) {
//         callback(err); // Chama a função callback com erro se houver falha
//       } else {
//         callback(null, { message: "Aluno atualizado com sucesso!" });
//       }
//     });
//     // Adiciona os parâmetros necessários para a atualização
//     request.addParameter("rm", TYPES.Int, data.rm);
//     request.addParameter("nome", TYPES.VarChar, data.nome);
//     request.addParameter("idade", TYPES.Int, data.idade);
//     request.addParameter("turma", TYPES.VarChar, data.turma);

//     connection.execSql(request); // Executa a atualização no banco de dados
//   });

//   connection.connect(); // Inicia a conexão
// };

// // Função para deletar um aluno existente
// exports.deleteUser = (rm, callback) => {
//   const connection = createConnection(); // Cria a conexão com o banco de dados
//   connection.on("connect", (err) => {
//     if (err) {
//       return callback(err, null); // Trata erros de conexão
//     }
//     // Consulta SQL para deletar o aluno pelo RM
//     const query = `DELETE FROM Alunos WHERE rm = @rm`;
//     const request = new Request(query, (err) => {
//       if (err) {
//         callback(err); // Chama a função callback com erro se houver falha
//       } else {
//         callback(null, { message: "Aluno deletado com sucesso!" });
//       }
//     });
//     // Adiciona o parâmetro RM para a exclusão
//     request.addParameter("rm", TYPES.Int, rm);

//     connection.execSql(request); // Executa a remoção no banco de dados
//   });

//   connection.connect(); // Inicia a conexão
// };


// //COM BY

// exports.getAlunosByRM = (rm,callback) => {
//   const connection = createConnection(); // Cria a conexão com o banco de dados
//   connection.on("connect", (err) => {
//     if (err) {
//       return callback(err, null); // Trata erros de conexão
//     }
//     const query = `SELECT * FROM Alunos WHERE rm = ${rm}`; // SQL para buscar todos os alunos
//     const request = new Request(query, (err, rowCount) => {
//       if (err) {
//         return callback(err, null); // Trata erros de execução da consulta
//       }

//       if (rowCount === 0) {
//         return callback(null, []); // Retorna um array vazio se não houver registros
//       }
//     });

//     // Evento 'row' para capturar todas as linhas de resultados
//     const result = [];
//     request.on("row", (columns) => {
//       result.push({
//         rm: columns[0].value,
//         nome: columns[1].value,
//         idade: columns[2].value,
//         turma: columns[3].value
//       });
//     });

//     // Ao completar a consulta, retorna o array com todos os alunos
//     request.on("requestCompleted", () => {
//       callback(null, result); // Retorna o array de resultados
//     });

//     request.addParameter("rm", TYPES.Int, rm);
//     connection.execSql(request); // Executa a consulta
//   });

//   connection.connect(); // Inicia a conexão
// };

// exports.getAlunosByNOME = (nome,callback) => {
//   const connection = createConnection(); // Cria a conexão com o banco de dados
 
 
//   connection.on("connect", (err) => {
//     if (err) {
//       return callback(err, null); // Trata erros de conexão
//     }
//     const query = `SELECT * FROM alunos WHERE nome LIKE @nome`; // SQL para buscar todos os alunos
//     const request = new Request(query, (err, rowCount) => {
//       if (err) {
//         return callback(err, null); // Trata erros de execução da consulta
//       }

//       if (rowCount === 0) {
//         return callback(null, []); // Retorna um array vazio se não houver registros
//       }
//     });

//     // Evento 'row' para capturar todas as linhas de resultados
//     const result = [];
//     request.on("row", (columns) => {
//       result.push({
//         rm: columns[0].value,
//         nome: columns[1].value,
//         idade: columns[2].value,
//         turma: columns[3].value
//       });
//     });

//     // Ao completar a consulta, retorna o array com todos os alunos
//     request.on("requestCompleted", () => {
//       callback(null, result); // Retorna o array de resultados
//     });

//     request.addParameter("nome", TYPES.VarChar, `%${nome}%`);
//     connection.execSql(request); // Executa a consulta
//   });

//   connection.connect(); // Inicia a conexão
// };